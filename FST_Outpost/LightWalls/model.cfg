class CfgSkeletons
{
	class Default
	{
		isDiscrete = 1;
		skeletonInherit = "";
		skeletonBones[] = {};
	};
	class FST_OutpostWall_Light_Entrance_Skeleton: Default
	{
		skeletonInherit = "Default";
		skeletonBones[] =
		{
			"Door1","",
			"Door2",""
		};
	};
};
class CfgModels
{
	class Default
	{
		sections[] = {};
		sectionsInherit="";
		skeletonName = "";
	};
	class FST_OutpostWall_Light:Default
	{
		sections[]=
		{
			"Camo",
			"Camo1",
			"Camo2",
			"Camo3"
		};
	};
	class FST_OutpostWall_Light_Curve:Default
	{
		sections[]=
		{
			"Camo",
			"Camo1",
			"Camo2",
			"Camo3",
			"Camo4"
		};
	};
	class FST_OutpostWall_Light_Entrance:Default
	{
		skeleton = "FST_OutpostWall_Light_Entrance_Skeleton";
		sections[]=
		{
			"Camo",
			"Camo1",
			"Camo2",
			"Camo3",
			"Camo4",
			"Camo5",
			"Camo6"
		};
		sectionsInherit = "";		
		class Animations
		{
			// Animation for rotating door #1 (without a door handle)
			class Door1Rotation
			{
				type			= "rotation";
				source			= "Door_1_source"; // Controler defined in class AnimationSources in config.cpp.
				selection		= "Door1"; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
				axis			= "Door1Rotate"; // Axis of the rotation.
				memory			= 1;
				minValue		= 0; // Value of the controller at which the rotation will be angle0
				maxValue		= 1; // Value of the controller at which the rotation will be angle1
				angle0			= 0;
				angle1			= (rad 90); // "rad" converts from degrees to radians
			};

			// Animation for door #2 (with a door handle). Note that when door is being closed, the animations run in reverse.
			class Door2Rotation: Door1Rotation
			{
				source			= "Door_2_source";
				selection		= "Door2";
				axis			= "Door2Rotate";
				memory			= 1;
				minValue		= 0; // Value of the controller at which the rotation will be angle0
				maxValue		= 1; // Value of the controller at which the rotation will be angle1
				angle0			= 0;
				angle1			= -(rad 90);
			};
		};
	};
};
